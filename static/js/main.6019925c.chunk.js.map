{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["randomColor","require","App","useState","item","setItem","JSON","parse","localStorage","getItem","items","setItems","newitem","trim","color","luminosity","defaultPos","x","y","alert","useEffect","stringify","className","id","value","onChange","e","target","placeholder","onKeyPress","event","keyCode","which","onClick","map","index","defaultPosition","onStop","data","newArr","updatePos","style","splice","deleteNote","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+RAGIA,EAAcC,EAAQ,IAgFXC,MA9Ef,WAAgB,IAAD,EACWC,mBAAS,IADpB,mBACNC,EADM,KACAC,EADA,OAEaF,mBACxBG,KAAKC,MAAMC,aAAaC,QAAQ,WAAa,IAHlC,mBAENC,EAFM,KAECC,EAFD,KAMPC,EAAU,WACd,GAAoB,KAAhBR,EAAKS,OAAe,CACtB,IAAMD,EAAU,CACdR,KAAMA,EACNU,MAAOd,EAAY,CACjBe,WAAY,UAEdC,WAAY,CAAEC,EAAG,IAAKC,EAAG,IAE3BP,GAAS,SAACD,GAAD,4BAAeA,GAAf,CAAsBE,OAC/BP,EAAQ,SAERc,MAAM,gBACNd,EAAQ,KA2BZ,OAhBAe,qBAAU,WACRZ,aAAaH,QAAQ,QAASC,KAAKe,UAAUX,MAC5C,CAACA,IAeF,yBAAKY,UAAU,OACb,yBAAKC,GAAG,YACN,2BACEC,MAAOpB,EACPqB,SAAU,SAACC,GAAD,OAAOrB,EAAQqB,EAAEC,OAAOH,QAClCI,YAAY,qBACZC,WAAY,SAACH,GA9BJ,IAACI,EAEH,OAFGA,EA8BkBJ,GA7BjBK,SAAWD,EAAME,QAEhCpB,OA6BE,4BAAQqB,QAASrB,GAAjB,UAEDF,EAAMwB,KAAI,SAAC9B,EAAM+B,GAChB,OACE,kBAAC,IAAD,CACEC,gBAAiBhC,EAAKY,WACtBqB,OAAQ,SAACX,EAAGY,IA3BJ,SAACA,EAAMH,GACvB,IAAII,EAAM,YAAO7B,GACjB6B,EAAOJ,GAAOnB,WAAa,CAAEC,EAAGqB,EAAKrB,EAAGC,EAAGoB,EAAKpB,GAChDP,EAAS4B,GAyBCC,CAAUF,EAAMH,KAGlB,yBAAKM,MAAO,CAAE,mBAAoBrC,EAAKU,OAASQ,UAAU,OAA1D,UACMlB,EAAKA,MACT,4BAAQmB,GAAG,SAASU,QAAS,SAACP,GAAD,OA3BtB,SAACS,GAClB,IAAII,EAAM,YAAO7B,GACjB6B,EAAOG,OAAOP,EAAO,GACrBxB,EAAS4B,GAwBqCI,CAAWR,KAA/C,YC5DMS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6019925c.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport Draggable from \"react-draggable\";\nvar randomColor = require(\"randomcolor\");\n\nfunction App() {\n  const [item, setItem] = useState(\"\");\n  const [items, setItems] = useState(\n    JSON.parse(localStorage.getItem(\"items\")) || []\n  );\n\n  const newitem = () => {\n    if (item.trim() !== \"\") {\n      const newitem = {\n        item: item,\n        color: randomColor({\n          luminosity: \"light\",\n        }),\n        defaultPos: { x: 100, y: 0 },\n      };\n      setItems((items) => [...items, newitem]);\n      setItem(\"\");\n    } else {\n      alert(\"Enter a item\");\n      setItem(\"\");\n    }\n  };\n\n  const keyPress = (event) => {\n    var code = event.keyCode || event.which;\n    if (code === 13) {\n      newitem();\n    }\n  };\n\n  useEffect(() => {\n    localStorage.setItem(\"items\", JSON.stringify(items));\n  }, [items]);\n\n  const updatePos = (data, index) => {\n    let newArr = [...items];\n    newArr[index].defaultPos = { x: data.x, y: data.y };\n    setItems(newArr);\n  };\n\n  const deleteNote = (index) => {\n    let newArr = [...items];\n    newArr.splice(index, 1);\n    setItems(newArr);\n  };\n\n  return (\n    <div className=\"App\">\n      <div id=\"new-item\">\n        <input\n          value={item}\n          onChange={(e) => setItem(e.target.value)}\n          placeholder=\"Enter something...\"\n          onKeyPress={(e) => keyPress(e)}\n        />\n        <button onClick={newitem}>ENTER</button>\n      </div>\n      {items.map((item, index) => {\n        return (\n          <Draggable\n            defaultPosition={item.defaultPos}\n            onStop={(e, data) => {\n              updatePos(data, index);\n            }}\n          >\n            <div style={{ \"background-color\": item.color }} className=\"box\">\n              {`${item.item}`}\n              <button id=\"delete\" onClick={(e) => deleteNote(index)}>\n                X\n              </button>\n            </div>\n          </Draggable>\n        );\n      })}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}